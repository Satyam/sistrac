
> sistract-desktop@0.0.0 flow /home/satyam/sistrac/packages/desktop
> flow "suggest" "src/unstated/connectors/utils/connect.jsx"

/home/satyam/sistrac/packages/desktop/src/unstated/connectors/utils/connect.jsx
--- old
+++ new
@@ -5,10 +5,10 @@
 
 // for unstated connect:
 
-type OrigProps = Object;
+type OrigProps = Object;type OrigProps = Object
 
-export type MapProps = (ContainersType, OrigProps | void) => {};
-export type Init = (ContainersType, OrigProps | void) => any;
+export type MapProps = (ContainersType, OrigProps | void) => {};type MapProps = (ContainersType, (OrigProps | void)) => {}
+export type Init = (ContainersType, OrigProps | void) => any;type Init = (ContainersType, (OrigProps | void)) => any
 
 type RendererProps = {
   init?: Init,
@@ -16,41 +16,41 @@
   origProps: OrigProps,
   BaseComp: ComponentType<{}>,
   mapProps: MapProps,
-};
+};type RendererProps = {BaseComp: ComponentType<{}>, init?: Init, mapProps: MapProps, origProps: OrigProps, states: ContainersType}
 
-class Renderer extends Component<RendererProps> {
+class Renderer extends Componentclass React$Component<Props, State = void><RendererProps> {
   componentDidMount() {
-    const { init, states, origProps } = this.props;
-    if (init) {
-      init(...states, origProps);
+    const { init((ContainersType, (OrigProps | void)) => any) | Init | void, statesContainersType, origPropsOrigProps } = thisthis.propsRendererProps;
+    if (initvoid | Init) {
+      init(ContainersType, (OrigProps | void)) => any(...statesclass ContainerType[], origPropsObject)any;
     }
   }
   render() {
-    const { BaseComp, origProps, mapProps, states } = this.props;
-    const props = mapProps(...states, origProps);
-    return <BaseComp {...origProps} {...props} />;
+    const { BaseCompComponentType<{}>, origPropsOrigProps, mapPropsMapProps, statesContainersType } = thisthis.propsRendererProps;
+    const props{} = mapProps(ContainersType, (OrigProps | void)) => {}(...statesclass ContainerType[], origPropsObject){};
+    return <BaseComp {...origPropsObject} {...props{}} />React$Element<class React$Component> | React$Element<{(props: {}, context: any): React$Node, contextTypes?: any, displayName?: ?string, propTypes?: $SubType<{[_: $Keys<{}>]: any}>}>;
   }
-}
+}class Renderer
 
-const connect = (
-  to: Class<ContainerType> | Array<Class<ContainerType>>,
-  mapProps: MapProps,
-  init?: Init,
-) => (BaseComp: ComponentType<any>): ComponentType<any> => (
-  origProps: OrigProps,
+const connect(to: (class ContainerType | class ContainerType[]), mapProps: MapProps, init?: Init) => (BaseComp: ComponentType<any>) => ComponentType<any> = (
+  to: Class<ContainerType> | Array<Class<ContainerType>>class ContainerType | class ContainerType[],
+  mapProps: MapPropsMapProps,
+  init?: Initvoid | Init,
+) => (BaseComp: ComponentType<any>ComponentType<any>): ComponentType<any> => (
+  origProps: OrigPropsOrigProps,
 ) => (
-  <Subscribe to={Array.isArray(to) ? to : [to]}>
+  <Subscribe to={Arrayclass Array<T>.isArray(obj: any) => boolean(toclass ContainerType | class ContainerType[]) ? toclass ContainerType[] | any : [toclass ContainerType]any | class ContainerType[]class ContainerType[] | any}>
     {(...states) => {
-      const props: RendererProps = {
-        init,
-        mapProps,
-        BaseComp,
-        origProps,
-        states,
-      };
-      return <Renderer {...props} />;
-    }}
-  </Subscribe>
-);
+      const props: RendererPropsRendererProps = {
+        initvoid | Init,
+        mapPropsMapProps,
+        BaseCompComponentType<any>,
+        origPropsOrigProps,
+        statesContainer<Object>[] | class ContainerType[],
+      }{|BaseComp: ComponentType<{}>, init?: Init, mapProps: MapProps, origProps: OrigProps, states: ContainersType|};
+      return <Renderer {...propsRendererProps} />React$Element<class Renderer>;
+    }(...states: (Container<Object>[] | class ContainerType[])) => React$Element<class Renderer>}
+  </Subscribe>React$Element<class Subscribe>
+)(BaseComp: ComponentType<any>) => ComponentType<any>(origProps: OrigProps) => React$Element<class Subscribe>(to: (class ContainerType | class ContainerType[]), mapProps: MapProps, init?: Init) => (BaseComp: ComponentType<any>) => ComponentType<any>;
 
-export default connect;
+export default connect(to: (class ContainerType | class ContainerType[]), mapProps: MapProps, init?: Init) => (BaseComp: ComponentType<any>) => ComponentType<any>;
